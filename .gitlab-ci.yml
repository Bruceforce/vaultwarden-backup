stages:
- push:readme
- build-and-release

variables:
  DOCKERHUB_REGISTRY: docker.io
  DOCKERHUB_REPO: vaultwarden-backup
  IMAGE_NAME_DOCKERHUB: $DOCKERHUB_REGISTRY/$DOCKERHUB_USER/$DOCKERHUB_REPO
  # see https://gitlab.com/gitlab-org/gitlab-runner/issues/4501 and https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#docker-in-docker-with-tls-enabled-in-kubernetes
  # the variables following DOCKER_HOST are needed because we use alpine as build image and not docker. We do this to integrate semantic-release bot
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  # See https://github.com/docker/buildx/releases
  BUILDX_VERSION: v0.9.1
  BUILDX_ARCH: linux-amd64

.docker_login: &docker_login
  docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

.dockerhub_login: &dockerhub_login
  docker login -u "$DOCKERHUB_USER" -p "$DOCKERHUB_PASSWORD" $DOCKERHUB_REGISTRY

.docker_build_template: &docker_build
  image: node:lts-alpine
  stage: build-and-release
  services:
    - name: docker:dind
      command: ["--experimental"]
  before_script:
    - apk add git zip docker curl
    - docker info
    - mkdir -p ~/.docker/cli-plugins
    - curl -sSLo ~/.docker/cli-plugins/docker-buildx https://github.com/docker/buildx/releases/download/$BUILDX_VERSION/buildx-$BUILDX_VERSION.$BUILDX_ARCH
    - chmod +x ~/.docker/cli-plugins/docker-buildx
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker context create my-context
    - docker buildx create --use my-context
    - docker info
    - npm install -g semantic-release @semantic-release/gitlab @semantic-release/git @semantic-release/exec @semantic-release/changelog

pre-commit:
  stage: .pre
  image: python:3.11
  script:
    - pip install pre-commit
    - pre-commit run --all-files
    - pre-commit run --all-files --hook-stage manual commitizen-branch
  rules:
    - when: always

build and release:main:
  <<: *docker_build
  script:
    - semantic-release
    - .gitlab/prepare-release.sh latest@$(date -Iseconds) # Also build latest version if there is no new release
    - .gitlab/build-and-release.sh latest
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

build and release:non-main:
  <<: *docker_build
  script:
    - .gitlab/prepare-release.sh 0.0.0-$CI_COMMIT_REF_SLUG
    - .gitlab/build-and-release.sh $CI_COMMIT_REF_SLUG
  rules:
    - if: $CI_COMMIT_BRANCH != "main"
